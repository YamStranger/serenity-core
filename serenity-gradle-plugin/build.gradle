ext {
    bintrayPackage = 'serenity-gradle-plugin'
    projectDescription = 'Serenity Gradle Plugin'
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/classpath")
    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir
    doLast {
        outputDir.mkdirs()
        def classpath=file("$outputDir/plugin-classpath.txt")
        def text=""
        sourceSets.main.runtimeClasspath.each {
            if(!it.isDirectory() && it.name.endsWith(".jar")){
                text+="$it.absolutePath\n"
            }
        }
        classpath.text=text
    }
}

def cloneGeneratedJars(def project) {
    def destination = Files.createDirectories(Paths.get("$buildDir").resolve("libs"))
    project.buildDir.toPath().resolve("libs").eachFile {
        Files.copy(it,
            destination.resolve(it.toFile().getName()),
            StandardCopyOption.REPLACE_EXISTING)
    }
}

task copySerenityCore() {
    doLast {
        cloneGeneratedJars(project(':serenity-core'))
    }
}

task copySerenityJunit() {
    doLast {
        cloneGeneratedJars(project(':serenity-junit'))
    }
}

dependencies {
    compile gradleApi()
//    compile localGroovy()
    compile 'org.codehaus.groovy:groovy-all:2.3.10'
    compile project(':serenity-core')
    testCompile "junit:junit:4.11"
}
